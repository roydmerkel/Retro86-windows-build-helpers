diff -Naur Retro68.old/Elf2Mac/CMakeLists.txt Retro68/Elf2Mac/CMakeLists.txt
--- Retro68.old/Elf2Mac/CMakeLists.txt	2022-03-02 21:58:33.839198649 -0800
+++ Retro68/Elf2Mac/CMakeLists.txt	2022-03-20 14:32:04.404177762 -0700
@@ -23,7 +23,8 @@
     Symbol.h Symbol.cc
     Symtab.h Symtab.cc
     Section.h Section.cc
-    Object.h Object.cc)
+    Object.h Object.cc
+    err.h err.c)
 target_link_libraries(Elf2Mac ResourceFiles ELF)
 
 target_include_directories(Elf2Mac PRIVATE ${CMAKE_INSTALL_PREFIX}/include)
diff -Naur Retro68.old/Elf2Mac/Elf2Mac.cc Retro68/Elf2Mac/Elf2Mac.cc
--- Retro68.old/Elf2Mac/Elf2Mac.cc	2022-03-02 21:58:33.839198649 -0800
+++ Retro68/Elf2Mac/Elf2Mac.cc	2022-03-20 15:22:11.990465661 -0700
@@ -22,7 +22,8 @@
 
 #include <gelf.h>
 
-#include <err.h>
+//#include <err.h>
+#include "err.h"
 
 #include <string>
 #include <vector>
@@ -31,7 +32,8 @@
 
 #include <unistd.h>
 #include <sys/types.h>
-#include <sys/wait.h>
+//#include <sys/wait.h>
+#include "wait.h"
 
 #include <boost/algorithm/string/predicate.hpp>
 
@@ -51,38 +53,17 @@
         argv.push_back(s.c_str());
     argv.push_back(NULL);
 
-    pid_t pid = fork();
-    if(pid < 0)
+    errno = 0;
+    int status = _spawnvp(_P_WAIT, argv[0], const_cast<char* const *> (argv.data()));
+    if(status == -1)
     {
-        perror("unable to fork");
+        perror("spawn failed");
         exit(-1);
     }
-    else if(pid == 0)
+    else if(status != 0)
     {
-        execvp(argv[0], const_cast<char* const *> (argv.data()));
-        perror("exec failed");
-        exit(-1);
-    }
-    else
-    {
-        int wstatus;
-        int result = 0;
-        do
-        {
-            result = waitpid(pid, &wstatus, 0);
-        } while(result == -1 && errno == EINTR);
-        if(!WIFEXITED(wstatus))
-        {
-            errx(EXIT_FAILURE, "ld process did not exit properly");
-        }
-        else
-        {
-            int exitcode = WEXITSTATUS(wstatus);
-            if(exitcode)
-                exit(exitcode);
-        }
+            exit(status);
     }
-
 }
 
 int main(int argc, char *argv[])
diff -Naur Retro68.old/Elf2Mac/Object.cc Retro68/Elf2Mac/Object.cc
--- Retro68.old/Elf2Mac/Object.cc	2022-03-02 21:58:33.843198366 -0800
+++ Retro68/Elf2Mac/Object.cc	2022-03-20 14:36:39.321871436 -0700
@@ -24,10 +24,12 @@
 #include "SegmentMap.h"
 #include "Reloc.h"
 
-#include <err.h>
+//#include <err.h>
+#include "err.h"
 #include <fcntl.h>
 #include <sys/types.h>
-#include <sys/wait.h>
+//#include <sys/wait.h>
+#include "wait.h"
 #include <fstream>
 #include <sstream>
 #include <iostream>
diff -Naur Retro68.old/LaunchAPPL/Client/CMakeLists.txt Retro68/LaunchAPPL/Client/CMakeLists.txt
--- Retro68.old/LaunchAPPL/Client/CMakeLists.txt	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/CMakeLists.txt	2022-04-09 22:31:22.653030819 -0700
@@ -8,6 +8,8 @@
     Serial.h Serial.cc
     TCP.h TCP.cc
     SharedFile.h SharedFile.cc
+    env.h env.c
+    pspawn.c pspawn.h tpspawn.c wpspawn.c strFuncs.c errFuncs.c
 )
 
 if(APPLE)
@@ -39,4 +41,8 @@
     target_link_libraries(LaunchAPPL ${APPLICATIONSERVICES_FW})    
 endif()
 
+if(WIN32)
+    target_link_libraries(LaunchAPPL wsock32 ws2_32)
+endif()
+
 install(TARGETS LaunchAPPL RUNTIME DESTINATION bin)
diff -Naur Retro68.old/LaunchAPPL/Client/Executor.cc Retro68/LaunchAPPL/Client/Executor.cc
--- Retro68.old/LaunchAPPL/Client/Executor.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/Executor.cc	2022-03-20 21:33:17.600730257 -0700
@@ -1,6 +1,7 @@
 #include "Executor.h"
 #include "Launcher.h"
 #include "Utilities.h"
+#include "env.h"
 
 namespace po = boost::program_options;
 
diff -Naur Retro68.old/LaunchAPPL/Client/Serial.cc Retro68/LaunchAPPL/Client/Serial.cc
--- Retro68.old/LaunchAPPL/Client/Serial.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/Serial.cc	2022-04-09 21:13:07.345814936 -0700
@@ -4,23 +4,49 @@
 #include "Stream.h"
 #include "ReliableStream.h"
 #include "ServerProtocol.h"
-#include <termios.h>
+//#include <termios.h>
 #include <unistd.h>
 #include <fcntl.h>
-#include <arpa/inet.h>
-#include <poll.h>
+//#include <arpa/inet.h>
+//#include <poll.h>
+#include <windows.h>
+#include <stdexcept>
 #include <chrono>
 #include <iostream>
+#include <queue>
 
 namespace po = boost::program_options;
 using namespace std::literals::chrono_literals;
 
+void InvalidateHandle(HANDLE& hHandle )
+{
+    hHandle = INVALID_HANDLE_VALUE;
+}
+
+#define SERIAL_STREAM_BUFFER_SIZE 4096
+static DWORD WINAPI EventThreadProcInit(LPVOID lpParameter);
 class SerialStream : public WaitableStream
 {
-    static const long kReadBufferSize = 4096;
-    uint8_t readBuffer[kReadBufferSize];
+    static const long kReadBufferSize;
+    uint8_t readBuffer[SERIAL_STREAM_BUFFER_SIZE];
+    friend DWORD WINAPI EventThreadProcInit(LPVOID lpParameter);
+private:
+    unsigned EventThreadProc();
+    CRITICAL_SECTION readSection;
+    BOOL readSectionInitialized;
+    CRITICAL_SECTION hDataRxSection;
+    BOOL hDataRxInitialized;
+    HANDLE eventThread;
+    DWORD threadId;
+    HANDLE hThreadTerm;
+    HANDLE hThreadStarted;
+    HANDLE hDataRx;
+    HANDLE hDataTx;
+    BOOL isConnected;
+    std::queue<uint8_t> readData;
 public:
-    int fd;
+    //int fd;
+    HANDLE h;
     int baud;
 
     virtual void write(const void* p, size_t n) override;
@@ -31,6 +57,8 @@
     ~SerialStream();
 };
 
+const long SerialStream::kReadBufferSize = SERIAL_STREAM_BUFFER_SIZE;
+
 class SerialLauncher : public StreamBasedLauncher
 {
     SerialStream stream;
@@ -39,21 +67,181 @@
     SerialLauncher(po::variables_map& options);
 };
 
+static DWORD WINAPI EventThreadProcInit(LPVOID lpParameter)
+{
+    class SerialStream FAR * thisFunc = (class SerialStream FAR *)lpParameter;
+    return thisFunc->EventThreadProc();
+}
+
+unsigned SerialStream::EventThreadProc()
+{
+    BOOL cont = TRUE;
+    DWORD eventMask = 0;
+
+    OVERLAPPED ov;
+    memset(&ov, 0, sizeof ov);
+    ov.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
+    HANDLE handles[2];
+    handles[0] = this->hThreadTerm;
+    handles[1] = ov.hEvent;
+
+
+    DWORD wait;
+    SetEvent(this->hThreadStarted);
+
+    while(cont)
+    {
+        BOOL event = WaitCommEvent(h, &eventMask, &ov);
+
+        if(!event)
+        {
+            if(GetLastError() != ERROR_IO_PENDING)
+            {
+                fprintf(stderr, "last Error: %lx\n", (unsigned long)GetLastError());
+                throw std::runtime_error("failed to read serial port.\n");
+            }
+        }
+
+        do {
+            wait = WaitForMultipleObjects(2, handles, FALSE, INFINITE);
+
+            switch(wait)
+            {
+                case WAIT_OBJECT_0:
+                    {
+                        fprintf(stderr, "exit thread.\n");
+                        ExitThread(1);
+                    }
+                    break;
+                case WAIT_OBJECT_0 + 1:
+                    {
+                        DWORD mask;
+
+                        if(GetCommMask(h, &mask))
+                        {
+                            if(mask & EV_TXEMPTY)
+                            {
+                                ResetEvent(ov.hEvent);
+                                SetEvent(this->hDataTx);
+                            }
+                            if(mask & EV_RXCHAR)
+                            {
+                                int accum = 0;
+
+                                EnterCriticalSection(&readSection);
+                                BOOL readFileRet = FALSE;
+                                DWORD bytesRead = 0;
+                                OVERLAPPED ovRead;
+                                memset(&ovRead, '\0', sizeof ovRead);
+                                ovRead.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
+                                do
+                                {
+                                    ResetEvent(ovRead.hEvent);
+                                    char szTmp[1];
+                                    memset(szTmp, '\0', sizeof szTmp);
+                                    readFileRet = ReadFile(h, szTmp, sizeof szTmp, &bytesRead, &ovRead);
+                                    if(!readFileRet)
+                                    {
+                                        cont = FALSE;
+                                        break;
+                                    }
+                                    if(bytesRead > 0)
+                                    {
+                                        size_t curByte;
+                                        for(curByte = 0; curByte < bytesRead; curByte++)
+                                        {
+                                            readData.push(((uint8_t*)szTmp)[curByte]);
+                                        }
+                                        accum += bytesRead;
+                                    }
+                                }
+                                while(0);
+                                CloseHandle(ovRead.hEvent);
+
+                                LeaveCriticalSection(&readSection);
+
+                                if(accum > 0)
+                                {
+                                    EnterCriticalSection(&hDataRxSection);
+                                    SetEvent(hDataRx);
+                                    LeaveCriticalSection(&hDataRxSection);
+                                }
+                                ResetEvent(ov.hEvent);
+                            }
+                        }
+                    }
+                    break;
+            }
+        } while(wait == 0x102);
+    }
+    return 0;
+}
 
 SerialStream::SerialStream(po::variables_map &options)
 {
+    readSectionInitialized = FALSE;
+    hDataRxInitialized = FALSE;
+    eventThread = INVALID_HANDLE_VALUE;
+    threadId = 0;
+    hThreadTerm = INVALID_HANDLE_VALUE;
+    hThreadStarted = INVALID_HANDLE_VALUE;
+    hDataRx = INVALID_HANDLE_VALUE;
+    hDataTx = INVALID_HANDLE_VALUE;
+    isConnected = FALSE;
+
     std::string port = options["serial-port"].as<std::string>();
     baud = options["serial-baud"].as<int>();
-    fd = open(port.c_str(), O_RDWR | O_NOCTTY | O_NDELAY );
-    if(fd < 0)
+    //fd = open(port.c_str(), O_RDWR | O_NOCTTY | O_NDELAY );
+    h = CreateFile(port.c_str(), GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);
+    //if(fd < 0)
+    //    throw std::runtime_error("Cannot open serial port.\n");
+    if(h == NULL || h == INVALID_HANDLE_VALUE)
+        throw std::runtime_error("Cannot open serial port.\n");
+
+    DCB dcb;
+    COMMTIMEOUTS cto;
+    if(!GetCommState(h, &dcb))
+    {
         throw std::runtime_error("Cannot open serial port.\n");
+    }
+    if(!GetCommTimeouts(h, &cto))
+    {
+        throw std::runtime_error("Cannot open serial port.\n");
+    }
 
-    struct termios tios;
-    tcgetattr(fd,&tios);
+    //struct termios tios;
+    //tcgetattr(fd,&tios);
 
-    tios.c_cflag = CRTSCTS | CS8 | CLOCAL | CREAD;
+    //tios.c_cflag = CRTSCTS | CS8 | CLOCAL | CREAD;
+    //tios.c_iflag = 0;//IGNPAR | ICRNL;
+    //tios.c_lflag = 0;
+    //tios.c_oflag = 0;
+    dcb.DCBlength = sizeof (DCB);
+    dcb.fBinary = TRUE;
+    dcb.fParity = FALSE;
+    dcb.fOutxCtsFlow = TRUE;
+    dcb.fOutxDsrFlow = FALSE;
+    dcb.fDtrControl = DTR_CONTROL_ENABLE;
+    dcb.fDsrSensitivity = FALSE;
+    dcb.fTXContinueOnXoff = TRUE;
+    dcb.fOutX = FALSE;
+    dcb.fInX = FALSE;
+    dcb.fErrorChar = FALSE;
+    dcb.fNull = FALSE;
+    dcb.fRtsControl = RTS_CONTROL_ENABLE;
+    dcb.fAbortOnError = FALSE;
+    dcb.XonLim = 0;
+    dcb.XoffLim = 0;
+    dcb.ByteSize = 8;
+    dcb.Parity = NOPARITY;
+    dcb.StopBits = ONESTOPBIT;
+    dcb.XonChar = 0; // TODO
+    dcb.XoffChar = 0; // TODO
+    dcb.ErrorChar = 0; // TODO
+    dcb.EofChar = 0; // TODO
+    dcb.EvtChar = 0; // TODO
 
-    switch(baud)
+    /*switch(baud)
     {
         case 9600:      tios.c_cflag |= B9600; break;
         case 19200:     tios.c_cflag |= B19200; break;
@@ -63,39 +251,139 @@
         case 230400:    tios.c_cflag |= B230400; break;
         default:
             throw std::runtime_error("Unsupported baud rate.\n");
+    }*/
+    switch(baud)
+    {
+        case 9600:      dcb.BaudRate = CBR_9600; break;
+        case 19200:     dcb.BaudRate = CBR_19200; break;
+        case 38400:     dcb.BaudRate = CBR_38400; break;
+        case 57600:     dcb.BaudRate = CBR_57600; break;
+        case 115200:    dcb.BaudRate = CBR_115200; break;
+        case 230400:    dcb.BaudRate = 230400; break;
+        case 256000:    dcb.BaudRate = CBR_256000; break;
+        default:
+            throw std::runtime_error("Unsupported baud rate.\n");
+    }
+
+
+    //tios.c_iflag = 0;//IGNPAR | ICRNL;
+    //tios.c_lflag = 0;
+    //tios.c_oflag = 0;
+    //tios.c_cc[VTIME]    = 0;   /* inter-character timer unused */
+    //tios.c_cc[VMIN]     = 1;   /* blocking read until 1 chars received */
+    cto.ReadIntervalTimeout = MAXDWORD;
+    cto.ReadTotalTimeoutMultiplier = 0;
+    cto.ReadTotalTimeoutConstant = 0;
+    cto.WriteTotalTimeoutMultiplier = 0;
+    cto.WriteTotalTimeoutConstant = 0;
+    //tcsetattr(fd,TCSANOW,&tios);
+    if(!SetCommState(h, &dcb))
+    {
+        throw std::runtime_error("Cannot open set comm attrs.\n");
+    }
+    if(!SetCommTimeouts(h, &cto))
+    {
+        throw std::runtime_error("Cannot open set comm attrs.\n");
+    }
+    if(!SetCommMask(h, EV_RXCHAR| EV_TXEMPTY))
+    {
+        throw std::runtime_error("Cannot open set comm attrs.\n");
     }
 
-    tios.c_iflag = 0;//IGNPAR | ICRNL;
-    tios.c_lflag = 0;
-    tios.c_oflag = 0;
-    tios.c_cc[VTIME]    = 0;   /* inter-character timer unused */
-    tios.c_cc[VMIN]     = 1;   /* blocking read until 1 chars received */
-    tcsetattr(fd,TCSANOW,&tios);
+    isConnected = FALSE;
+
+    InitializeCriticalSection(&readSection);
+    readSectionInitialized = TRUE;
+
+    InitializeCriticalSection(&hDataRxSection);
+    hDataRxInitialized = TRUE;
+
+    //create thread terminator event...
+    hDataRx = CreateEvent(NULL,FALSE,FALSE,NULL);
+    hDataTx = CreateEvent(NULL,FALSE,TRUE,NULL);
+    hThreadTerm = CreateEvent(NULL,FALSE,FALSE,NULL);
+    hThreadStarted = CreateEvent(NULL,FALSE,FALSE,NULL); 
+
+    eventThread = CreateThread(NULL, 0, EventThreadProcInit, (LPVOID)this, 0, &threadId);
+    DWORD wait = WaitForSingleObject(hThreadStarted, INFINITE);
+
+    if(wait != WAIT_OBJECT_0)
+    {
+        throw std::runtime_error("Cannot create event thread.\n");
+    }
+
+    CloseHandle(hThreadStarted);
+    InvalidateHandle(hThreadStarted);
     usleep(500000);
+
+    isConnected = TRUE;
 }
 SerialStream::~SerialStream()
 {
-    tcdrain(fd);
+    isConnected = FALSE;
+    if(hThreadTerm != INVALID_HANDLE_VALUE)
+    {
+        SetEvent(hThreadTerm);
+        WaitForSingleObject(eventThread,INFINITE);
+        CloseHandle( hThreadTerm);
+        InvalidateHandle(hThreadTerm);
+    }
+    if(hDataRx != INVALID_HANDLE_VALUE)
+    {
+        CloseHandle( hDataRx);
+        InvalidateHandle(hDataRx);
+    }
+    if(hDataTx != INVALID_HANDLE_VALUE)
+    {
+        CloseHandle( hDataTx);
+        InvalidateHandle(hDataTx);
+    }
+    if(eventThread != INVALID_HANDLE_VALUE)
+    {
+        CloseHandle( eventThread);
+        InvalidateHandle(eventThread);
+    }
+    if(readSectionInitialized)
+    {
+        readSectionInitialized = FALSE;
+        DeleteCriticalSection(&readSection);
+    }
+    if(hDataRxInitialized)
+    {
+        hDataRxInitialized = FALSE;
+        DeleteCriticalSection(&hDataRxSection);
+    }
+    //tcdrain(fd);
+    FlushFileBuffers(h);
     usleep(500000);
-    close(fd);
+    //close(fd);
+    CloseHandle(h);
 }
 
 void SerialStream::write(const void* p, size_t n)
 {
     while(n)
     {
-        struct pollfd pfd;
-        pfd.fd = fd;
-        pfd.events = POLLOUT;
-        pfd.revents = 0;
-        poll(&pfd, 1, 1000);
-        if(pfd.revents & POLLOUT)
+        DWORD waitRes = WaitForSingleObject(this->hDataTx, 1000);
+        if(waitRes == WAIT_OBJECT_0)
         {
-            ssize_t written = ::write(fd, p, n);
-            if(written > 0)
+            //ssize_t written = ::write(fd, p, n);
+            DWORD dwBytesWritten = 0;
+            OVERLAPPED ov;
+            memset(&ov, '\0', sizeof ov);
+            ov.hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
+            BOOL writeRes = WriteFile(h, p, n, &dwBytesWritten, &ov);
+            if(writeRes || (!writeRes && GetLastError() == ERROR_IO_PENDING))
             {
-                p = (const void*) ( (const char*)p + written );
-                n -= written;
+                waitRes = WaitForSingleObject(ov.hEvent, INFINITE);
+                if(waitRes == WAIT_OBJECT_0)
+                {
+                    if(GetOverlappedResult(h, &ov, &dwBytesWritten, FALSE))
+                    {
+                        p = (const void*) ( (const char*)p + dwBytesWritten );
+                        n -= dwBytesWritten;
+                    }
+                }
             }
         }
     }
@@ -103,18 +391,35 @@
 
 void SerialStream::wait()
 {
-    struct pollfd pfd;
-    pfd.fd = fd;
-    pfd.events = POLLIN;
-    pfd.revents = 0;
-    poll(&pfd, 1, 1000);
-    if(pfd.revents & POLLIN)
+    EnterCriticalSection(&readSection);
+    if(readData.size() > 0)
+    {
+        size_t curByte;
+        for(curByte = 0; readData.size() && curByte + 1 < kReadBufferSize; curByte++)
+        {
+            readBuffer[curByte] = readData.front();
+            readData.pop();
+        }
+        notifyReceive(readBuffer, curByte);
+        return;
+    }
+    LeaveCriticalSection(&readSection);
+
+    DWORD waitRes = WaitForSingleObject(hDataRx, 1000);
+    if(waitRes == WAIT_OBJECT_0)
     {
-        ssize_t n = ::read(fd, readBuffer, kReadBufferSize);
-        if(n > 0)
+        EnterCriticalSection(&hDataRxSection);
+        ResetEvent(hDataRx);
+        EnterCriticalSection(&readSection);
+        size_t curByte;
+        for(curByte = 0; readData.size() && curByte + 1 < kReadBufferSize; curByte++)
         {
-            notifyReceive(readBuffer, n);
+            readBuffer[curByte] = readData.front();
+            readData.pop();
         }
+        notifyReceive(readBuffer, curByte);
+        LeaveCriticalSection(&readSection);
+        LeaveCriticalSection(&hDataRxSection);
     }
 }
 
diff -Naur Retro68.old/LaunchAPPL/Client/SharedFile.cc Retro68/LaunchAPPL/Client/SharedFile.cc
--- Retro68.old/LaunchAPPL/Client/SharedFile.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/SharedFile.cc	2022-04-09 21:54:03.297391313 -0700
@@ -6,6 +6,7 @@
 #include <chrono>
 #include <iostream>
 #include <boost/filesystem.hpp>
+#include <windows.h>
 
 namespace fs = boost::filesystem;
 namespace po = boost::program_options;
@@ -56,13 +57,15 @@
     
     do
     {
-        usleep(100000);
+        //usleep(100000);
+        ::Sleep(100);
     } while(fs::exists(shared_directory / "in_channel"));
 }
 
 void SharedFileStream::wait()
 {
-    usleep(100000);
+    //usleep(100000);
+    ::Sleep(100);
     if(fs::exists(shared_directory / "out_channel"))
     {
         {
diff -Naur Retro68.old/LaunchAPPL/Client/SSH.cc Retro68/LaunchAPPL/Client/SSH.cc
--- Retro68.old/LaunchAPPL/Client/SSH.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/SSH.cc	2022-03-22 22:23:35.225155177 -0700
@@ -5,9 +5,14 @@
 #include <iostream>
 #include <unistd.h>
 #include <sys/types.h>
-#include <sys/wait.h>
+//#include <sys/wait.h>
+#include "wait.h"
 #include <signal.h>
 #include <boost/lexical_cast.hpp>
+#include "pspawn.h"
+#include <windows.h>
+#include <io.h>
+#include <fcntl.h>
 
 namespace po = boost::program_options;
 using std::string;
@@ -66,24 +71,61 @@
         argv.push_back(s.c_str());
     argv.push_back(NULL);
 
-    int fd[2];
-    pipe(fd);
-    const int READ_END = 0;
-    const int WRITE_END = 1;
+    HANDLE pipestdin = NULL;
+    HANDLE pipestdout = NULL;
+    HANDLE pipestderr = NULL;
+    int hpipestdin = -1;
+    int hpipestdout = -1;
+    int hpipestderr = -1;
 
-    pid_t pid = fork();
-    if(pid < 0)
+    HANDLE procHandle = pspawnvp(&pipestdin, &pipestdout, &pipestderr, argv[0], const_cast<char* const *> (argv.data()));
+    if(procHandle == INVALID_HANDLE_VALUE || procHandle == NULL)
     {
-        perror("unable to fork");
-        return 1;
+        perror("exec failed");
+        std::cerr << "Tried to execute: " << program;
+        for(auto a : args)
+            std::cerr << " " << a;
+        std::cerr << std::endl;
+        _exit(1);
     }
-    else if(pid == 0)
+    else if(!pipestdin)
     {
-        dup2(fd[READ_END], STDIN_FILENO);
-        close(fd[WRITE_END]);
-        close(fd[READ_END]);
-
-        execvp(argv[0], const_cast<char* const *> (argv.data()));
+        perror("exec failed");
+        std::cerr << "Tried to execute: " << program;
+        for(auto a : args)
+            std::cerr << " " << a;
+        std::cerr << std::endl;
+        _exit(1);
+    }
+    else if((hpipestdin = _open_osfhandle((intptr_t)pipestdin, _O_WRONLY | _O_WTEXT)) < 0)
+    {
+        CloseHandle(pipestdin);
+        CloseHandle(pipestdout);
+        CloseHandle(pipestderr);
+        perror("exec failed");
+        std::cerr << "Tried to execute: " << program;
+        for(auto a : args)
+            std::cerr << " " << a;
+        std::cerr << std::endl;
+        _exit(1);
+    }
+    else if((hpipestdout = _open_osfhandle((intptr_t)pipestdout, _O_RDONLY | _O_WTEXT)) < 0)
+    {
+        CloseHandle(pipestdout);
+        CloseHandle(pipestderr);
+	close(hpipestdin);
+        perror("exec failed");
+        std::cerr << "Tried to execute: " << program;
+        for(auto a : args)
+            std::cerr << " " << a;
+        std::cerr << std::endl;
+        _exit(1);
+    }
+    else if((hpipestderr = _open_osfhandle((intptr_t)pipestderr, _O_RDONLY | _O_WTEXT)) < 0)
+    {
+        CloseHandle(pipestderr);
+	close(hpipestdin);
+	close(hpipestdout);
         perror("exec failed");
         std::cerr << "Tried to execute: " << program;
         for(auto a : args)
@@ -93,29 +135,25 @@
     }
     else
     {
-        close(fd[READ_END]);
-
         std::ostringstream tmp;
         app.write(tmp, ResourceFile::Format::macbin);
         const std::string data = tmp.str();
 
-        write(fd[WRITE_END], data.data(), data.size());
-        close(fd[WRITE_END]);
+        write(hpipestdin, data.data(), data.size());
 
-        int wstatus;
-        int result = 0;
-        do
-        {
-            result = waitpid(pid, &wstatus, 0);
-        } while(result == -1 && errno == EINTR);
+	int status = WaitForSingleObject(procHandle, INFINITE);
+
+	close(hpipestdin);
+	close(hpipestdout);
+	close(hpipestderr);
 
-        if(!WIFEXITED(wstatus))
+        if(status == WAIT_TIMEOUT || status == WAIT_FAILED)
         {
             return false;
         }
         else
         {
-            //int exitcode = WEXITSTATUS(wstatus);
+            //int exitcode = status;
             return true;
         }
     }
diff -Naur Retro68.old/LaunchAPPL/Client/StreamBasedLauncher.cc Retro68/LaunchAPPL/Client/StreamBasedLauncher.cc
--- Retro68.old/LaunchAPPL/Client/StreamBasedLauncher.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/StreamBasedLauncher.cc	2022-04-09 22:19:14.731709633 -0700
@@ -3,7 +3,11 @@
 #include "ServerProtocol.h"
 #include <iostream>
 #include <sstream>
-#include <arpa/inet.h>
+//#include <arpa/inet.h>
+extern "C" {
+    #include <winsock2.h>
+    #include <windows.h>
+}
 
 StreamBasedLauncher::StreamBasedLauncher(boost::program_options::variables_map &options)
     : Launcher(options)
diff -Naur Retro68.old/LaunchAPPL/Client/TCP.cc Retro68/LaunchAPPL/Client/TCP.cc
--- Retro68.old/LaunchAPPL/Client/TCP.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/TCP.cc	2022-04-09 22:19:20.303689058 -0700
@@ -3,12 +3,16 @@
 #include "Utilities.h"
 #include "Stream.h"
 #include "ServerProtocol.h"
-#include <termios.h>
-#include <arpa/inet.h>
+//#include <termios.h>
+//#include <arpa/inet.h>
+extern "C" {
+    #include <winsock2.h>
+    #include <windows.h>
+}
 #include <chrono>
 #include <iostream>
 #include <sys/types.h>
-#include <sys/socket.h>
+//#include <sys/socket.h>
 #include <unistd.h>
 
 namespace po = boost::program_options;
@@ -20,7 +24,8 @@
     static const long kReadBufferSize = 4096;
     uint8_t readBuffer[kReadBufferSize];
 public:
-    int fd;
+    //int fd;
+    SOCKET fd;
 
     virtual void write(const void* p, size_t n) override;
 
@@ -47,7 +52,7 @@
     addr.sin_port = htons( 1984 );
  
     //Connect to remote server
-    int result = connect(fd , (struct sockaddr *)&addr , sizeof(addr));
+    int result = connect(fd , (struct sockaddr FAR *)&addr , sizeof(addr));
     if(result < 0)
         perror("connect");
 }
@@ -55,7 +60,8 @@
 {
     close(fd);
     // a little hack: delay 0.1 seconds so that LaunchAPPLServer has time to reopen the port
-    usleep(100000);
+    //usleep(100000);
+    Sleep(100);
 }
 
 void TCPStream::write(const void* p, size_t n)
diff -Naur Retro68.old/LaunchAPPL/Client/Utilities.cc Retro68/LaunchAPPL/Client/Utilities.cc
--- Retro68.old/LaunchAPPL/Client/Utilities.cc	2022-03-02 21:58:34.523150433 -0800
+++ Retro68/LaunchAPPL/Client/Utilities.cc	2022-03-20 18:14:51.542723081 -0700
@@ -2,10 +2,12 @@
 
 #include <unistd.h>
 #include <sys/types.h>
-#include <sys/wait.h>
+//#include <sys/wait.h>
+#include "wait.h"
 #include <signal.h>
 #include <boost/filesystem.hpp>
 #include <iostream>
+#include <windows.h>
 
 namespace fs = boost::filesystem;
 using std::string;
@@ -19,85 +21,41 @@
         argv.push_back(s.c_str());
     argv.push_back(NULL);
 
-    pid_t pid = fork();
-    if(pid < 0)
+    HANDLE worker_pid = (HANDLE)_spawnvp(_P_NOWAIT, argv[0], const_cast<char* const *> (argv.data()));
+    if(worker_pid == INVALID_HANDLE_VALUE || worker_pid == NULL)
     {
-        perror("unable to fork");
-        return 1;
+        perror("exec failed");
+        std::cerr << "Tried to execute: " << program;
+        for(auto a : args)
+            std::cerr << " " << a;
+        std::cerr << std::endl;
+        _exit(1);
     }
-    else if(pid == 0)
+    else
     {
-        pid_t worker_pid = timeout ? fork() : 0;
-        if(worker_pid < 0)
-        {
-            perror("unable to fork");
-            _exit(1);
-        }
-        if(worker_pid == 0)
-        {
-            execvp(argv[0], const_cast<char* const *> (argv.data()));
-            perror("exec failed");
-            std::cerr << "Tried to execute: " << program;
-            for(auto a : args)
-                std::cerr << " " << a;
-            std::cerr << std::endl;
-            _exit(1);
-        }
-
-        pid_t timeout_pid = fork();
-        if(timeout_pid < 0)
-        {
-            perror("unable to fork");
-            _exit(1);
-        }
-        if(timeout_pid == 0)
-        {
-            sleep(timeout);
-            _exit(0);
-        }
-        int wstatus;
-        pid_t exited_pid = wait(&wstatus);
-        if(exited_pid == worker_pid)
+        DWORD waitResult = 0;
+        if(timeout >= 0)
         {
-            kill(timeout_pid, SIGKILL);
-            wait(NULL);
-            if(!WIFEXITED(wstatus))
-            {
-                return 1;
-            }
-            else
-            {
-                int exitcode = WEXITSTATUS(wstatus);
-                _exit(exitcode);
-            }
+            waitResult = WaitForSingleObject(worker_pid, timeout * 1000);
         }
         else
         {
-            kill(worker_pid, SIGKILL);
-            wait(NULL);
-            _exit(1);
+            waitResult = WaitForSingleObject(worker_pid, INFINITE);
         }
-    }
-    else
-    {
-        int wstatus;
-        int result = 0;
-        do
-        {
-            result = waitpid(pid, &wstatus, 0);
-        } while(result == -1 && errno == EINTR);
-
-        if(!WIFEXITED(wstatus))
+        if(waitResult == WAIT_FAILED)
         {
             return 1;
         }
+        else if(waitResult == WAIT_TIMEOUT)
+        {
+            TerminateProcess(worker_pid, 1);
+	    return 1;
+        }
         else
         {
-            int exitcode = WEXITSTATUS(wstatus);
-            return exitcode;
+            return waitResult;
         }
     }
-
 }
 
 
diff -Naur Retro68.old/libelf/CMakeLists.txt Retro68/libelf/CMakeLists.txt
--- Retro68.old/libelf/CMakeLists.txt	2022-03-02 21:58:34.567147334 -0800
+++ Retro68/libelf/CMakeLists.txt	2022-03-19 13:27:38.980208476 -0700
@@ -1,7 +1,9 @@
-file(GLOB ELF_FILES src/*.c src/*.h include/*.h)
+file(GLOB ELF_FILES src/*.cpp src/*.c src/*.h include/*.h)
+file(GLOB SPECIAL_ELF_FILES src/fchmod.cpp)
 add_library(ELF ${ELF_FILES}
 	)
 target_include_directories(ELF PRIVATE src)
 target_include_directories(ELF PUBLIC include)
 target_link_libraries(ELF -lz)
 target_compile_definitions(ELF PRIVATE HAVE_CONFIG_H)
+set_property(SOURCE ${SPECIAL_ELF_FILES} PROPERTY COMPILE_FLAGS -mgeneral-regs-only)
diff -Naur Retro68.old/libelf/include/libelf.h Retro68/libelf/include/libelf.h
--- Retro68.old/libelf/include/libelf.h	2022-03-02 21:58:34.643141982 -0800
+++ Retro68/libelf/include/libelf.h	2022-03-20 15:39:12.983799019 -0700
@@ -187,6 +187,11 @@
   ELF_K_NUM
 } Elf_Kind;
 
+#ifndef __uid_t_defined
+#define __uid_t_defined 1
+#define uid_t int
+#endif
+#define gid_t int
 
 /* Archive member header.  */
 typedef struct
diff -Naur Retro68.old/libelf/src/common.h Retro68/libelf/src/common.h
--- Retro68.old/libelf/src/common.h	2022-03-02 21:58:34.647141701 -0800
+++ Retro68/libelf/src/common.h	2022-03-02 22:02:55.084553964 -0800
@@ -30,7 +30,29 @@
 #ifndef _COMMON_H
 #define _COMMON_H       1
 
-#include <ar.h>
+//#include <ar.h>
+#ifndef INCLUDED_AR_H
+#define INCLUDED_AR_H
+#define ARMAG  "!<arch>\n"
+#define SARMAG  8
+
+#define ARFMAG  "`\n"
+
+struct ar_hdr
+{
+    char ar_name[ 16 ];
+    char ar_date[ 12 ];
+    char ar_uid[ 6 ];
+    char ar_gid[ 6 ];
+    char ar_mode[ 8 ];
+    char ar_size[ 10 ];
+    char ar_fmag[ 2 ];
+};
+
+#define SARFMAG  2
+#define SARHDR  sizeof( struct ar_hdr )
+#endif
+
 #include <stdlib.h>
 #include <string.h>
 #include "portable_endian.h"
diff -Naur Retro68.old/libelf/src/elf32_updatefile.c Retro68/libelf/src/elf32_updatefile.c
--- Retro68.old/libelf/src/elf32_updatefile.c	2022-03-02 21:58:34.647141701 -0800
+++ Retro68/libelf/src/elf32_updatefile.c	2022-03-02 22:03:34.263874612 -0800
@@ -38,7 +38,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
-#include <sys/mman.h>
+//#include <sys/mman.h>
+#include "mman.h"
+#include "sysconf.h"
 
 #include <system.h>
 #include "libelfP.h"
diff -Naur Retro68.old/libelf/src/elf_begin.c Retro68/libelf/src/elf_begin.c
--- Retro68.old/libelf/src/elf_begin.c	2022-03-02 21:58:34.647141701 -0800
+++ Retro68/libelf/src/elf_begin.c	2022-03-02 22:04:00.931498487 -0800
@@ -39,7 +39,9 @@
 #include <stddef.h>
 #include <string.h>
 #include <unistd.h>
-#include <sys/mman.h>
+//#include <sys/mman.h>
+#include "mman.h"
+#include "fcntl.h"
 #include <sys/stat.h>
 
 #include <system.h>
diff -Naur Retro68.old/libelf/src/elf_end.c Retro68/libelf/src/elf_end.c
--- Retro68.old/libelf/src/elf_end.c	2022-03-02 21:58:34.647141701 -0800
+++ Retro68/libelf/src/elf_end.c	2022-03-02 22:04:28.163178250 -0800
@@ -34,7 +34,8 @@
 #include <assert.h>
 #include <stddef.h>
 #include <stdlib.h>
-#include <sys/mman.h>
+//#include <sys/mman.h>
+#include "mman.h"
 
 #include "libelfP.h"
 
diff -Naur Retro68.old/libelf/src/elf_update.c Retro68/libelf/src/elf_update.c
--- Retro68.old/libelf/src/elf_update.c	2022-03-02 21:58:34.651141419 -0800
+++ Retro68/libelf/src/elf_update.c	2022-03-02 22:06:06.734463257 -0800
@@ -34,7 +34,10 @@
 #include <libelf.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <sys/mman.h>
+//#include <sys/mman.h>
+#include "mman.h"
+#include "fchmod.h"
+#include "fallocate.h"
 #include <sys/stat.h>
 
 #include "libelfP.h"
diff -Naur Retro68.old/libelf/src/libelfP.h Retro68/libelf/src/libelfP.h
--- Retro68.old/libelf/src/libelfP.h	2022-03-02 21:58:34.655141137 -0800
+++ Retro68/libelf/src/libelfP.h	2022-03-02 22:15:59.232446714 -0800
@@ -30,7 +30,30 @@
 #ifndef _LIBELFP_H
 #define _LIBELFP_H 1
 
-#include <ar.h>
+//#include <ar.h>
+
+#ifndef INCLUDED_AR_H
+#define INCLUDED_AR_H
+#define ARMAG  "!<arch>\n"
+#define SARMAG  8
+
+#define ARFMAG  "`\n"
+
+struct ar_hdr
+{
+    char ar_name[ 16 ];
+    char ar_date[ 12 ];
+    char ar_uid[ 6 ];
+    char ar_gid[ 6 ];
+    char ar_mode[ 8 ];
+    char ar_size[ 10 ];
+    char ar_fmag[ 2 ];
+};
+
+#define SARFMAG  2
+#define SARHDR  sizeof( struct ar_hdr )
+#endif
+
 #include <gelf.h>
 
 #include <errno.h>
diff -Naur Retro68.old/libelf/src/nlist.c Retro68/libelf/src/nlist.c
--- Retro68.old/libelf/src/nlist.c	2022-03-02 21:58:34.655141137 -0800
+++ Retro68/libelf/src/nlist.c	2022-03-02 22:22:07.587881561 -0800
@@ -37,8 +37,17 @@
 #include <nlist.h>
 #include <unistd.h>
 
+#include <sys/stat.h>
+
 #include "libelfP.h"
 
+#define _O_RDONLY      0
+#define _O_WRONLY      1
+#define _O_RDWR        2
+
+#define O_RDONLY _O_RDONLY
+#define O_WRONLY _O_WRONLY
+#define O_RDWR _O_RDWR
 
 struct hashentry
 {
@@ -71,7 +80,7 @@
   size_t cnt;
 
   /* Open the file.  */
-  fd = open (filename, O_RDONLY);
+  fd = open (filename, _O_RDONLY);
   if (fd == -1)
     {
       __libelf_seterrno (ELF_E_NOFILE);
diff -Naur Retro68.old/libelf/src/portable_endian.h Retro68/libelf/src/portable_endian.h
--- Retro68.old/libelf/src/portable_endian.h	2022-03-02 21:58:34.655141137 -0800
+++ Retro68/libelf/src/portable_endian.h	2022-03-02 22:24:42.080225345 -0800
@@ -63,6 +63,33 @@
 #	include <winsock2.h>
 #	include <sys/param.h>
 
+static long long ntohll(long long x)
+{
+	return ((unsigned long long)(((unsigned char *)(&x))[7]) << 0LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[6]) << 8LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[5]) << 16LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[4]) << 24LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[3]) << 32LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[2]) << 40LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[1]) << 48LL)
+	     | ((unsigned long long)(((unsigned char *)(&x))[0]) << 56LL);
+}
+
+static long long htonll(long long x)
+{
+	unsigned char data[8] = {};
+	data[0] = (x & 0xFF00000000000000LL) >> 56LL;
+	data[1] = (x & 0x00FF000000000000LL) >> 48LL;
+	data[2] = (x & 0x0000FF0000000000LL) >> 40LL;
+	data[3] = (x & 0x000000FF00000000LL) >> 32LL;
+	data[4] = (x & 0x00000000FF000000LL) >> 24LL;
+	data[5] = (x & 0x0000000000FF0000LL) >> 16LL;
+	data[6] = (x & 0x000000000000FF00LL) >> 8LL;
+	data[7] = (x & 0x00000000000000FFLL) >> 0LL;
+
+	return *(long long *)(data);
+}
+
 #	if BYTE_ORDER == LITTLE_ENDIAN
 
 #		define htobe16(x) htons(x)
diff -Naur Retro68.old/libelf/src/system.h Retro68/libelf/src/system.h
--- Retro68.old/libelf/src/system.h	2022-03-02 21:58:34.655141137 -0800
+++ Retro68/libelf/src/system.h	2022-03-02 22:28:31.273118160 -0800
@@ -41,6 +41,10 @@
 # define BE32(n)	be32toh (n)
 # define BE64(n)	be64toh (n)
 
+#ifndef powerof2
+#define powerof2(x)     ((((x) - 1) & (x)) == 0)
+#endif
+
 #ifndef MAX
 #define MAX(m, n) ((m) < (n) ? (n) : (m))
 #endif
@@ -70,6 +74,38 @@
      __res; })
 #endif
 
+static inline ssize_t
+pwrite (int fd, const void *buf, size_t len, off_t off)
+{
+  long long filePos = _lseeki64 (fd, off, SEEK_SET);
+  int writeResult = -1;
+  if(filePos == -1L)
+  {
+         return filePos;
+  }
+
+  writeResult = _write(fd, buf, len);
+  _lseeki64 (fd, filePos, SEEK_SET);
+
+  return writeResult;
+}
+
+static inline ssize_t
+pread (int fd, void *buf, size_t len, off_t off)
+{
+  long long filePos = _lseeki64 (fd, off, SEEK_SET);
+  int readResult = -1;
+  if(filePos == -1L)
+  {
+         return filePos;
+  }
+
+  readResult = _read(fd, buf, len);
+  _lseeki64 (fd, filePos, SEEK_SET);
+
+  return readResult;
+}
+
 static inline ssize_t __attribute__ ((unused))
 pwrite_retry (int fd, const void *buf, size_t len, off_t off)
 {
@@ -137,4 +173,8 @@
   extern int never_defined_just_used_for_checking[(expr) ? 1 : -1]	\
     __attribute__ ((unused))
 
+#define S_ISUID 0004000
+#define S_ISGID 0002000
+#define S_ISVTX 0001000
+
 #endif /* system.h */
diff -Naur Retro68.old/PEFTools/CMakeLists.txt Retro68/PEFTools/CMakeLists.txt
--- Retro68.old/PEFTools/CMakeLists.txt	2022-03-02 21:58:34.659140856 -0800
+++ Retro68/PEFTools/CMakeLists.txt	2022-03-19 14:46:31.189519315 -0700
@@ -1,8 +1,8 @@
 find_package(Boost COMPONENTS filesystem system REQUIRED)
 
-add_executable(MakePEF MakePEF.cc rs6000.h PEF.h)
+add_executable(MakePEF MakePEF.cc rs6000.h PEF.h mman.c mman.h)
 
-add_executable(MakeImport MakeImport.cc PEF.h)
+add_executable(MakeImport MakeImport.cc PEF.h mman.c mman.h)
 target_link_libraries(MakeImport ResourceFiles ${Boost_LIBRARIES})
 target_include_directories(MakeImport PRIVATE ${Boost_INCLUDE_DIR})
 
diff -Naur Retro68.old/PEFTools/MakeImport.cc Retro68/PEFTools/MakeImport.cc
--- Retro68.old/PEFTools/MakeImport.cc	2022-03-02 21:58:34.659140856 -0800
+++ Retro68/PEFTools/MakeImport.cc	2022-03-20 10:26:16.411884435 -0700
@@ -8,9 +8,11 @@
 #include <algorithm>
 
 #include <sys/types.h>
-#include <sys/mman.h>
+//#include <sys/mman.h>
+#include "mman.h"
 #include <sys/stat.h>
-#include <sys/wait.h>
+//#include <sys/wait.h>
+#include "wait.h"
 
 #include <fcntl.h>
 #include <unistd.h>
@@ -55,34 +57,21 @@
 
 void RunCommand(const char *command, std::vector<std::string> args)
 {
-    std::vector<const char*> ptrs;
+    std::vector<const char*>ptrs;
     ptrs.push_back(command);
-    for(auto& s : args)
+    for(auto& s: args)
         ptrs.push_back(s.c_str());
     ptrs.push_back(NULL);
 
-    pid_t pid = fork();
-    if(pid == -1)
+    int status = _spawnvp(_P_WAIT, command, const_cast<char *const*>(ptrs.data()));
+    if(status == -1)
     {
-        perror(command);
+        perror("exec");
         exit(1);
     }
-
-    if(pid)
+    else if(status != 0)
     {
-        int status = 0;
-        while(waitpid(pid, &status, 0) == -1 && errno == EINTR)
-            ;
-        if(!WIFEXITED(status) || WEXITSTATUS(status) != 0)
-        {
-            std::cerr << command << " failed.\n";
-            exit(1);
-        }
-    }
-    else
-    {
-        execvp(command, const_cast<char *const*>(ptrs.data()));
-        perror("exec");
+        std::cerr << command << " failed.\n";
         exit(1);
     }
 }
diff -Naur Retro68.old/PEFTools/MakePEF.cc Retro68/PEFTools/MakePEF.cc
--- Retro68.old/PEFTools/MakePEF.cc	2022-03-02 21:58:34.659140856 -0800
+++ Retro68/PEFTools/MakePEF.cc	2022-03-20 10:28:43.955234320 -0700
@@ -6,7 +6,8 @@
 #include <set>
 #include <algorithm>
 #include <string.h>
-#include <alloca.h>
+//#include <alloca.h>
+#include <malloc.h>
 
 #include <assert.h>
 #include <stdint.h>
diff -Naur Retro68.old/Rez/CMakeLists.txt Retro68/Rez/CMakeLists.txt
--- Retro68.old/Rez/CMakeLists.txt	2022-03-02 21:58:34.659140856 -0800
+++ Retro68/Rez/CMakeLists.txt	2022-03-02 22:29:11.721311562 -0800
@@ -15,7 +15,7 @@
 #   You should have received a copy of the GNU General Public License
 #   along with Retro68.  If not, see <http://www.gnu.org/licenses/>.
 
-find_package(Boost COMPONENTS wave filesystem system thread regex program_options)
+find_package(Boost COMPONENTS wave filesystem system thread_win32 regex program_options)
 
 # Look for bison.
     # We need Version 3, and Mac OS X still comes with an outdated version (2.3).
diff -Naur Retro68.old/Rez/Test/UnitTests.cc Retro68/Rez/Test/UnitTests.cc
--- Retro68.old/Rez/Test/UnitTests.cc	2022-03-02 21:58:34.663140574 -0800
+++ Retro68/Rez/Test/UnitTests.cc	2022-03-19 13:50:19.565614114 -0700
@@ -1,5 +1,5 @@
 #define BOOST_TEST_MODULE UnitTests
-#define BOOST_TEST_DYN_LINK
+//#define BOOST_TEST_DYN_LINK
 #define BOOST_TEST_MAIN
 #include <boost/test/unit_test.hpp>
 
