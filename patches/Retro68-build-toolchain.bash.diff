--- build-toolchain.bash.old	2023-01-04 17:59:53.276249850 -0800
+++ build-toolchain.bash	2023-01-04 18:38:01.820056989 -0800
@@ -41,9 +41,20 @@
 BUILD_PPC=true
 BUILD_CARBON=true
 CLEAN_AFTER_BUILD=false
+STOP_AFTER_68K_GCC=false
+STOP_AFTER_PPC_GCC=false
+STOP_AFTER_TOOLS=false
+SKIP_68K_GCC=false
+SKIP_PPC_GCC=false
+SKIP_TOOLS=false
+
 HOST_CMAKE_FLAGS=()
 CMAKE_GENERATOR=
 
+BUILD=
+HOST=
+CROSS_PREFIX=
+
 function usage()
 {
 	echo "Usage: $0 [options]"
@@ -61,6 +72,18 @@
     echo "    --universal               use Apple's universal interfaces (default: autodetect)"
     echo "    --multiversal             use the open-source multiversal interfaces (default: autodetect)"
 	echo "    --help                    show this help message"
+	echo "    --build                   configure for building on BUILD [guessed]"
+	echo "    --host                    cross-compile to build programs to run on HOST [BUILD]"
+	echo "    --cross-prefix            cross compiler prefix for cmake"
+	echo "    --boost-rootdir           boost root dir for hfsutils"
+	echo "    --boost-libdir            boost root dir for hfsutils"
+	echo "    --boost-incdir            boost root dir for hfsutils"
+	echo "    --stop-after-68k-gcc      stop build after 68k gcc."
+	echo "    --stop-after-ppc-gcc      stop build after ppc gcc."
+	echo "    --stop-after-tools        stop build after tools."
+	echo "    --skip-68k-gcc-build      skip 68k gcc build."
+	echo "    --skip-ppc-gcc-build      skip ppc gcc build."
+	echo "    --skip-tools-build        skip tools build."
 }
 
 for ARG in $*; do
@@ -78,6 +101,24 @@
 			BUILD_PPC=false
 			BUILD_CARBON=false
 			;;
+		--stop-after-68k-gcc)
+			STOP_AFTER_68K_GCC=true
+			;;
+		--stop-after-ppc-gcc)
+			STOP_AFTER_PPC_GCC=true
+			;;
+		--stop-after-tools)
+			STOP_AFTER_TOOLS=true
+			;;
+		--skip-68k-gcc-build)
+			SKIP_68K_GCC=true
+			;;
+		--skip-ppc-gcc-build)
+			SKIP_PPC_GCC=true
+			;;
+		--skip-tools-build)
+			SKIP_TOOLS=true
+			;;
 		--no-carbon)
 			BUILD_CARBON=false
 			;;
@@ -92,6 +133,26 @@
 			HOST_CMAKE_FLAGS[${#HOST_CMAKE_FLAGS[@]}]="-DCMAKE_C_COMPILER=${ARG#*=}"
 			HOST_C_COMPILER="${ARG#*=}"
 			;;
+		--build=*)
+			BUILD="${ARG#*=}"
+			;;
+		--host=*)
+			HOST="${ARG#*=}"
+			;;
+		--cross-prefix=*)
+			CROSS_PREFIX="${ARG#*=}"
+			;;
+		--boost-rootdir=*)
+			Boost_DIR="${ARG#*=}"
+			BOOST_ROOT="${ARG#*=}"
+			;;
+		--boost-libdir=*)
+			BOOST_LIBRARYDIR="${ARG#*=}"
+			Boost_LIBRARIES="${ARG#*=}"
+			;;
+		--boost-incdir=*)
+			BOOST_INCLUDE_DIRS="${ARG#*=}"
+			;;
 		--ninja)
 			CMAKE_GENERATOR=-GNinja
 			;;
@@ -113,6 +174,16 @@
 	esac
 done
 
+if [ "$BOOST_ROOT" != "" -a "$BOOST_LIBRARYDIR" = "" ]; then
+	BOOST_LIBRARYDIR="$BOOST_ROOT/lib"
+	Boost_LIBRARIES="$BOOST_ROOT/lib"
+fi
+
+if [ "$BOOST_ROOT" != "" -a "$BOOST_INCLUDE_DIRS" = "" ]; then
+	BOOST_INCLUDE_DIRS="$BOOST_ROOT/include"
+	Boost_INCLUDE_DIRS="$BOOST_ROOT/include"
+fi
+
 ##################### Sanity checks
 
 if [ `pwd -P` == "$SRC" ]; then
@@ -195,10 +266,10 @@
 
 if [ $SKIP_THIRDPARTY != true ]; then
 
-	if [ "$PREFIX" = "$DEFAULT_PREFIX" ]; then
-		# Remove old install tree
-		rm -rf $PREFIX
-	fi
+	#if [ "$PREFIX" = "$DEFAULT_PREFIX" ]; then
+	#	# Remove old install tree
+	#	rm -rf $PREFIX
+	#fi
 	mkdir -p $PREFIX
 
 	if [ `uname` = Darwin ]; then
@@ -220,25 +291,87 @@
 	fi
 		
 	# Components needed for targeting 68K: binutils, gcc
-	if [ $BUILD_68K != false ]; then
+	if [ $BUILD_68K != false -a $SKIP_68K_GCC != true ]; then
 		export CC=$HOST_C_COMPILER
 		export CXX=$HOST_CXX_COMPILER
 
+		export WINEPATH="$(winepath -w gcc-build/gcc);$WINEPATHPOST"
+
 		# Build binutils for 68K
 		mkdir -p binutils-build
 		cd binutils-build
-		$SRC/binutils/configure --target=m68k-apple-macos --prefix=$PREFIX --disable-doc
+		if [ "$BUILD" != "" -a "$HOST" != "" ]; then
+			$SRC/binutils/configure --host=$HOST --build=$BUILD --target=m68k-apple-macos --prefix=$PREFIX --disable-doc
+		elif [ "$BUILD" != "" ]; then
+			$SRC/binutils/configure --build=$BUILD --target=m68k-apple-macos --prefix=$PREFIX --disable-doc
+		elif [ "$HOST" != "" ]; then
+			$SRC/binutils/configure --host=$HOST --target=m68k-apple-macos --prefix=$PREFIX --disable-doc
+		else
+			$SRC/binutils/configure --target=m68k-apple-macos --prefix=$PREFIX --disable-doc
+		fi
 		make -j8
 		make install
 		cd ..
 
 		# Build gcc for 68K
 		mkdir -p gcc-build
+		mkdir -p gcc-build/gcc
 		cd gcc-build
+		cp ../toolchain/m68k-apple-macos/bin/*.exe gcc
 		export target_configargs="--disable-nls --enable-libstdcxx-dual-abi=no --disable-libstdcxx-verbose"
-		$SRC/gcc/configure --target=m68k-apple-macos --prefix=$PREFIX \
-				--enable-languages=c,c++ --with-arch=m68k --with-cpu=m68000 \
-				--disable-libssp MAKEINFO=missing
+		set
+		if [ "$BUILD" != "" -a "$HOST" != "" ]; then
+			$SRC/gcc/configure --host=$HOST --build=$BUILD \
+					--target=m68k-apple-macos --prefix=$PREFIX \
+					--enable-languages=c,c++ --with-arch=m68k --with-cpu=m68000 \
+					--disable-libssp MAKEINFO=missing
+		elif [ "$BUILD" != "" ]; then
+			$SRC/gcc/configure --build=$BUILD \
+					--target=m68k-apple-macos --prefix=$PREFIX \
+					--enable-languages=c,c++ --with-arch=m68k --with-cpu=m68000 \
+					--disable-libssp MAKEINFO=missing
+		elif [ "$HOST" != "" ]; then
+			$SRC/gcc/configure --host=$HOST \
+					--target=m68k-apple-macos --prefix=$PREFIX \
+					--enable-languages=c,c++ --with-arch=m68k --with-cpu=m68000 \
+					--disable-libssp MAKEINFO=missing
+		else
+			$SRC/gcc/configure --target=m68k-apple-macos --prefix=$PREFIX \
+					--enable-languages=c,c++ --with-arch=m68k --with-cpu=m68000 \
+					--disable-libssp MAKEINFO=missing
+		fi
+
+                sed -i -e 's#S\["GCC_FOR_TARGET"\]="m68k-apple-macos-gcc"#S["GCC_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/"#g' config.status
+                sed -i -e 's#S\["CXX_FOR_TARGET"\]="m68k-apple-macos-c[+][+]"#S["CXX_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xg++.exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHEL"\\\n"L) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/li"\\\n"bstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"#g' config.status
+                sed -i -e 's#S\["CC_FOR_TARGET"\]="m68k-apple-macos-cc"#S["CC_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/"#g' config.status
+                sed -i -e 's#S\["RAW_CXX_FOR_TARGET"\]="m68k-apple-macos-c[+][+]"#S["RAW_CXX_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libst"\\\n"dc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"#g' config.status
+
+		sed -i -e 's#S\["AS_FOR_TARGET"\]="m68k-apple-macos-as"#S["AS_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/as.exe"#g' config.status
+		sed -i -e 's#S\["AR_FOR_TARGET"\]="m68k-apple-macos-ar"#S["AR_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/ar.exe"#g' config.status
+		sed -i -e 's#S\["LD_FOR_TARGET"\]="m68k-apple-macos-ld"#S["LD_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/ld.exe"#g' config.status
+		sed -i -e 's#S\["NM_FOR_TARGET"\]="m68k-apple-macos-nm"#S["NM_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/nm.exe"#g' config.status
+		sed -i -e 's#S\["STRIP_FOR_TARGET"\]="m68k-apple-macos-strip"#S["STRIP_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/strip.exe"#g' config.status
+		sed -i -e 's#S\["READELF_FOR_TARGET"\]="m68k-apple-macos-readelf"#S["READELF_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/readelf.exe"#g' config.status
+		sed -i -e 's#S\["RANLIB_FOR_TARGET"\]="m68k-apple-macos-ranlib"#S["RANLIB_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/ranlib.exe"#g' config.status
+		sed -i -e 's#S\["OBJDUMP_FOR_TARGET"\]="m68k-apple-macos-objdump"#S["OBJDUMP_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/objdump.exe"#g' config.status
+		sed -i -e 's#S\["OBJCOPY_FOR_TARGET"\]="m68k-apple-macos-objcopy"#S["OBJCOPY_FOR_TARGET"]="'"$PREFIX"'m68k-apple-macos/bin/objcopy.exe"#g' config.status
+
+		sed -i -e 's#GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) m68k-apple-macos-gcc#GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/#g' Makefile
+		sed -i -e 's#CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) m68k-apple-macos-c[+][+]#CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xg++.exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+		sed -i -e 's#CC_FOR_TARGET=$(STAGE_CC_WRAPPER) m68k-apple-macos-cc#CC_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/#g' Makefile
+		sed -i -e 's#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) m68k-apple-macos-c[+][+]#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+		sed -i -e 's#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xg[+][+].exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc[+][+] `if test -f $$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc[+][+]-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/libsupc[+][+]/.libs#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+
+		sed -i -e 's#AS_FOR_TARGET=m68k-apple-macos-as#AS_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/as.exe#g' Makefile
+		sed -i -e 's#AR_FOR_TARGET=m68k-apple-macos-ar#AR_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/ar.exe#g' Makefile
+		sed -i -e 's#LD_FOR_TARGET=m68k-apple-macos-ld#LD_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/ld.exe#g' Makefile
+		sed -i -e 's#NM_FOR_TARGET=m68k-apple-macos-nm#NM_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/nm.exe#g' Makefile
+		sed -i -e 's#STRIP_FOR_TARGET=m68k-apple-macos-strip#STRIP_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/strip.exe#g' Makefile
+		sed -i -e 's#READELF_FOR_TARGET=m68k-apple-macos-readelf#READELF_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/readelf.exe#g' Makefile
+		sed -i -e 's#RANLIB_FOR_TARGET=m68k-apple-macos-ranlib#RANLIB_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/ranlib.exe#g' Makefile
+		sed -i -e 's#OBJDUMP_FOR_TARGET=m68k-apple-macos-objdump#OBJDUMP_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/objdump.exe#g' Makefile
+		sed -i -e 's#OBJCOPY_FOR_TARGET=m68k-apple-macos-objcopy#OBJCOPY_FOR_TARGET='"$PREFIX"'m68k-apple-macos/bin/objcopy.exe#g' Makefile
+
 		# There seems to be a build failure in parallel builds; ignore any errors and try again without -j8.
 		make -j8 || make
 		make install
@@ -250,10 +383,10 @@
 
 		# Move the real linker aside and install symlinks to Elf2Mac
 		# (Elf2Mac is built by cmake below)
-		mv $PREFIX/bin/m68k-apple-macos-ld $PREFIX/bin/m68k-apple-macos-ld.real
-		mv $PREFIX/m68k-apple-macos/bin/ld $PREFIX/m68k-apple-macos/bin/ld.real
-		ln -s Elf2Mac $PREFIX/bin/m68k-apple-macos-ld
-		ln -s ../../bin/Elf2Mac $PREFIX/m68k-apple-macos/bin/ld
+		mv $PREFIX/bin/m68k-apple-macos-ld.exe $PREFIX/bin/m68k-apple-macos-ld.exe.real.exe
+		mv $PREFIX/m68k-apple-macos/bin/ld.exe $PREFIX/m68k-apple-macos/bin/ld.exe.real.exe
+		ln -s Elf2Mac.exe $PREFIX/bin/m68k-apple-macos-ld.exe
+		ln -s ../../bin/Elf2Mac.exe $PREFIX/m68k-apple-macos/bin/ld.exe
 
 		if [ $CLEAN_AFTER_BUILD != false ]; then
 			rm -rf binutils-build
@@ -261,26 +394,89 @@
 		fi
 
 	fi
+	if [ $STOP_AFTER_68K_GCC != false ]; then
+		unset CPPFLAGS
+		unset LDFLAGS
+		exit 0
+	fi
 
 	# Components needed for targeting PPC (including Carbon): binutils, gcc
-	if [ $BUILD_PPC != false ]; then
+	if [ $BUILD_PPC != false -a $SKIP_PPC_GCC != true ]; then
 		export CC=$HOST_C_COMPILER
 		export CXX=$HOST_CXX_COMPILER
 
+		export WINEPATH="$(winepath -w gcc-build-ppc/gcc);$WINEPATHPOST"
+
 		# Build binutils for PPC
 		mkdir -p binutils-build-ppc
 		cd binutils-build-ppc
-		$SRC/binutils/configure --disable-plugins --target=powerpc-apple-macos --prefix=$PREFIX --disable-doc
+		if [ "$BUILD" != "" -a "$HOST" != "" ]; then
+			$SRC/binutils/configure --host=$HOST --build=$BUILD --disable-plugins --target=powerpc-apple-macos --prefix=$PREFIX --disable-doc
+		elif [ "$BUILD" != "" ]; then
+			$SRC/binutils/configure --build=$BUILD --disable-plugins --target=powerpc-apple-macos --prefix=$PREFIX --disable-doc
+		elif [ "$HOST" != "" ]; then
+			$SRC/binutils/configure --host=$HOST --disable-plugins --target=powerpc-apple-macos --prefix=$PREFIX --disable-doc
+		else
+			$SRC/binutils/configure --disable-plugins --target=powerpc-apple-macos --prefix=$PREFIX --disable-doc
+		fi
 		make -j8
 		make install
 		cd ..
 
 		# Build gcc for PPC
 		mkdir -p gcc-build-ppc
+		mkdir -p gcc-build-ppc/gcc
 		cd gcc-build-ppc
+		cp ../toolchain/powerpc-apple-macos/bin/*.exe gcc
 		export target_configargs="--disable-nls --enable-libstdcxx-dual-abi=no --disable-libstdcxx-verbose"
-		$SRC/gcc/configure --target=powerpc-apple-macos --prefix=$PREFIX \
-			--enable-languages=c,c++ --disable-libssp --disable-lto MAKEINFO=missing
+		if [ "$BUILD" != "" -a "$HOST" != "" ]; then
+			$SRC/gcc/configure --host=$HOST --build=$BUILD \
+				--target=powerpc-apple-macos --prefix=$PREFIX \
+				--enable-languages=c,c++ --disable-libssp --disable-lto MAKEINFO=missing
+		elif [ "$BUILD" != "" ]; then
+			$SRC/gcc/configure --build=$BUILD \
+				--target=powerpc-apple-macos --prefix=$PREFIX \
+				--enable-languages=c,c++ --disable-libssp --disable-lto MAKEINFO=missing
+		elif [ "$HOST" != "" ]; then
+			$SRC/gcc/configure --host=$HOST \
+				--target=powerpc-apple-macos --prefix=$PREFIX \
+				--enable-languages=c,c++ --disable-libssp --disable-lto MAKEINFO=missing
+		else
+			$SRC/gcc/configure --target=powerpc-apple-macos --prefix=$PREFIX \
+				--enable-languages=c,c++ --disable-libssp --disable-lto MAKEINFO=missing
+		fi
+
+		sed -i -e 's#S\["GCC_FOR_TARGET"\]="powerpc-apple-macos-gcc"#S["GCC_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/"#g' config.status
+		sed -i -e 's#S\["CXX_FOR_TARGET"\]="powerpc-apple-macos-c[+][+]"#S["CXX_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xg++.exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHEL"\\\n"L) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/li"\\\n"bstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"#g' config.status
+		sed -i -e 's#S\["CC_FOR_TARGET"\]="powerpc-apple-macos-cc"#S["CC_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/"#g' config.status
+		sed -i -e 's#S\["RAW_CXX_FOR_TARGET"\]="powerpc-apple-macos-c[+][+]"#S["RAW_CXX_FOR_TARGET"]="$$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libst"\\\n"dc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs"#g' config.status
+
+		sed -i -e 's#S\["AS_FOR_TARGET"\]="powerpc-apple-macos-as"#S["AS_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/as.exe"#g' config.status
+		sed -i -e 's#S\["AR_FOR_TARGET"\]="powerpc-apple-macos-ar"#S["AR_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/ar.exe"#g' config.status
+		sed -i -e 's#S\["LD_FOR_TARGET"\]="powerpc-apple-macos-ld"#S["LD_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/ld.exe"#g' config.status
+		sed -i -e 's#S\["NM_FOR_TARGET"\]="powerpc-apple-macos-nm"#S["NM_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/nm.exe"#g' config.status
+		sed -i -e 's#S\["STRIP_FOR_TARGET"\]="powerpc-apple-macos-strip"#S["STRIP_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/strip.exe"#g' config.status
+		sed -i -e 's#S\["READELF_FOR_TARGET"\]="powerpc-apple-macos-readelf"#S["READELF_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/readelf.exe"#g' config.status
+		sed -i -e 's#S\["RANLIB_FOR_TARGET"\]="powerpc-apple-macos-ranlib"#S["RANLIB_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/ranlib.exe"#g' config.status
+		sed -i -e 's#S\["OBJDUMP_FOR_TARGET"\]="powerpc-apple-macos-objdump"#S["OBJDUMP_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/objdump.exe"#g' config.status
+		sed -i -e 's#S\["OBJCOPY_FOR_TARGET"\]="powerpc-apple-macos-objcopy"#S["OBJCOPY_FOR_TARGET"]="'"$PREFIX"'powerpc-apple-macos/bin/objcopy.exe"#g' config.status
+
+		sed -i -e 's#GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) powerpc-apple-macos-gcc#GCC_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/#g' Makefile
+		sed -i -e 's#CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) powerpc-apple-macos-c[+][+]#CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xg++.exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc++ `if test -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc++-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+		sed -i -e 's#CC_FOR_TARGET=$(STAGE_CC_WRAPPER) powerpc-apple-macos-cc#CC_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -B$$r/$(HOST_SUBDIR)/gcc/#g' Makefile
+		sed -i -e 's#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) powerpc-apple-macos-c[+][+]#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+		sed -i -e 's#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xg[+][+].exe -B$$r/$(HOST_SUBDIR)/gcc/ -nostdinc[+][+] `if test -f $$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/scripts/testsuite_flags; then $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/scripts/testsuite_flags --build-includes; else echo -funconfigured-libstdc[+][+]-v3 ; fi` -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc[+][+]-v3/libsupc[+][+]/.libs#RAW_CXX_FOR_TARGET=$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/gcc/xgcc.exe -shared-libgcc -B$$r/$(HOST_SUBDIR)/gcc -nostdinc++ -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/libsupc++/.libs#g' Makefile
+
+		sed -i -e 's#AS_FOR_TARGET=powerpc-apple-macos-as#AS_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/as.exe#g' Makefile
+		sed -i -e 's#AR_FOR_TARGET=powerpc-apple-macos-ar#AR_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/ar.exe#g' Makefile
+		sed -i -e 's#LD_FOR_TARGET=powerpc-apple-macos-ld#LD_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/ld.exe#g' Makefile
+		sed -i -e 's#NM_FOR_TARGET=powerpc-apple-macos-nm#NM_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/nm.exe#g' Makefile
+		sed -i -e 's#STRIP_FOR_TARGET=powerpc-apple-macos-strip#STRIP_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/strip.exe#g' Makefile
+		sed -i -e 's#READELF_FOR_TARGET=powerpc-apple-macos-readelf#READELF_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/readelf.exe#g' Makefile
+		sed -i -e 's#RANLIB_FOR_TARGET=powerpc-apple-macos-ranlib#RANLIB_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/ranlib.exe#g' Makefile
+		sed -i -e 's#OBJDUMP_FOR_TARGET=powerpc-apple-macos-objdump#OBJDUMP_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/objdump.exe#g' Makefile
+		sed -i -e 's#OBJCOPY_FOR_TARGET=powerpc-apple-macos-objcopy#OBJCOPY_FOR_TARGET='"$PREFIX"'powerpc-apple-macos/bin/objcopy.exe#g' Makefile
+
 		make -j8
 		make install
 		unset target_configargs
@@ -294,23 +490,37 @@
 			rm -rf gcc-build-ppc
 		fi
 	fi
+	if [ $STOP_AFTER_PPC_GCC != false ]; then
+		unset CPPFLAGS
+		unset LDFLAGS
+		exit 0
+	fi
 
 	unset CPPFLAGS
 	unset LDFLAGS
 
+	if [ $SKIP_TOOLS != true ]; then
+		# Build hfsutil
+		mkdir -p $PREFIX/lib
+		mkdir -p $PREFIX/share/man/man1
+		mkdir -p hfsutils
+		cd hfsutils
+		if [ "$BUILD" != "" -a "$HOST" != "" ]; then
+			$SRC/hfsutils/configure --host=$HOST --build=$BUILD --prefix=$PREFIX --mandir=$PREFIX/share/man --enable-devlibs
+		elif [ "$BUILD" != "" ]; then
+			$SRC/hfsutils/configure --build=$BUILD --prefix=$PREFIX --mandir=$PREFIX/share/man --enable-devlibs
+		elif [ "$HOST" != "" ]; then
+			$SRC/hfsutils/configure --host=$HOST --prefix=$PREFIX --mandir=$PREFIX/share/man --enable-devlibs
+		else
+			$SRC/hfsutils/configure --prefix=$PREFIX --mandir=$PREFIX/share/man --enable-devlibs
+		fi
+		make
+		make install
+		cd ..
 
-	# Build hfsutil
-	mkdir -p $PREFIX/lib
-	mkdir -p $PREFIX/share/man/man1
-	mkdir -p hfsutils
-	cd hfsutils
-	$SRC/hfsutils/configure --prefix=$PREFIX --mandir=$PREFIX/share/man --enable-devlibs
-	make
-	make install
-	cd ..
-
-	if [ $CLEAN_AFTER_BUILD != false ]; then
-		rm -rf hfsutils
+		if [ $CLEAN_AFTER_BUILD != false ]; then
+			rm -rf hfsutils
+		fi
 	fi
 else # SKIP_THIRDPARTY
     removeInterfacesAndLibraries
@@ -318,26 +528,70 @@
 
 ##################### Build host-based components: MakePEF, MakeImport, ConvertObj, Rez, ...
 
-echo "Building host-based tools..."
+if [ $SKIP_TOOLS != true ]; then
+	echo "Building host-based tools..."
+
+	export WINEPATH="$(winepath -w "$PREFIX/bin");$WINEPATHPOST"
+	echo "WINEPATH: $WINEPATH"
+
+	mkdir -p build-host
+	cd build-host
+	if [ "$CROSS_PREFIX" != "" ]; then
+		if [ "$BOOST_ROOT" != "" ]; then
+			echo 'Boost_DIR="'"$Boost_DIR"'" BOOST_DIR="'"$Boost_DIR"'" BOOST_ROOT="'"$BOOST_ROOT"'" cmake '"${SRC}"' -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB='"${CROSS_PREFIX}"'ranlib -DCMAKE_C_COMPILER='"${CROSS_PREFIX}"'gcc -DCMAKE_CXX_COMPILER='"${CROSS_PREFIX}"'g++ -DCMAKE_RC_COMPILER='"${CROSS_PREFIX}"'windres -DCMAKE_INSTALL_PREFIX='"$PREFIX"' -DCMAKE_BUILD_TYPE=Debug -DBoost_USE_STATIC_LIBS:BOOL=ON -DBOOST_ROOT:PATH="'"$BOOST_ROOT"'" -DBOOST_DIR:PATH="'"$Boost_DIR"'" -DBoost_DIR:PATH="'"$Boost_DIR"'" "'"${HOST_CMAKE_FLAGS[@]}"'" '"${CMAKE_GENERATOR}"
+			Boost_DIR="$Boost_DIR" BOOST_DIR="$Boost_DIR" BOOST_ROOT="$BOOST_ROOT" cmake ${SRC} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB=${CROSS_PREFIX}ranlib -DCMAKE_C_COMPILER=${CROSS_PREFIX}gcc -DCMAKE_CXX_COMPILER=${CROSS_PREFIX}g++ -DCMAKE_RC_COMPILER=${CROSS_PREFIX}windres -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Debug -DBoost_USE_STATIC_LIBS:BOOL=ON -DBOOST_ROOT:PATH="$BOOST_ROOT" -DBOOST_DIR:PATH="$Boost_DIR" -DBoost_DIR:PATH="$Boost_DIR" "${HOST_CMAKE_FLAGS[@]}" ${CMAKE_GENERATOR}
+		else
+			echo 'cmake '"${SRC}"' -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB='"${CROSS_PREFIX}"'ranlib -DCMAKE_C_COMPILER='"${CROSS_PREFIX}"'gcc -DCMAKE_CXX_COMPILER='"${CROSS_PREFIX}"'g++ -DCMAKE_RC_COMPILER='"${CROSS_PREFIX}"'windres -DCMAKE_INSTALL_PREFIX='"$PREFIX"' -DCMAKE_BUILD_TYPE=Debug "'"${HOST_CMAKE_FLAGS[@]}"'" '"${CMAKE_GENERATOR}"
+			cmake ${SRC} -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB=${CROSS_PREFIX}ranlib -DCMAKE_C_COMPILER=${CROSS_PREFIX}gcc -DCMAKE_CXX_COMPILER=${CROSS_PREFIX}g++ -DCMAKE_RC_COMPILER=${CROSS_PREFIX}windres -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Debug "${HOST_CMAKE_FLAGS[@]}" ${CMAKE_GENERATOR}
+		fi
+	else
+		if [ "$BOOST_ROOT" != "" ]; then
+			echo 'Boost_DIR="'"$Boost_DIR"'" BOOST_DIR="'"$Boost_DIR"'" BOOST_ROOT="'"$BOOST_ROOT"'" cmake '"${SRC}"' -DCMAKE_INSTALL_PREFIX='"$PREFIX"' -DCMAKE_BUILD_TYPE=Debug -DBoost_USE_STATIC_LIBS:BOOL=ON -DBOOST_ROOT:PATH="'"$BOOST_ROOT"'" -DBOOST_DIR:PATH="'"$Boost_DIR"'" -DBoost_DIR:PATH="'"$Boost_DIR"'" "'"${HOST_CMAKE_FLAGS[@]}"'" '"${CMAKE_GENERATOR}"
+			Boost_DIR="$Boost_DIR" BOOST_DIR="$Boost_DIR" BOOST_ROOT="$BOOST_ROOT" cmake ${SRC} -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Debug -DBoost_USE_STATIC_LIBS:BOOL=ON -DBOOST_ROOT:PATH="$BOOST_ROOT" -DBOOST_DIR:PATH="$Boost_DIR" -DBoost_DIR:PATH="$Boost_DIR" "${HOST_CMAKE_FLAGS[@]}" ${CMAKE_GENERATOR}
+		else
+			echo 'cmake '"${SRC}"' -DCMAKE_INSTALL_PREFIX='"$PREFIX"' -DCMAKE_BUILD_TYPE=Debug "'"${HOST_CMAKE_FLAGS[@]}"'" '"${CMAKE_GENERATOR}"
+			cmake ${SRC} -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Debug "${HOST_CMAKE_FLAGS[@]}" ${CMAKE_GENERATOR}
+		fi
+	fi
+	make
+	cd ..
 
-mkdir -p build-host
-cd build-host
-cmake ${SRC} -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Debug "${HOST_CMAKE_FLAGS[@]}" ${CMAKE_GENERATOR}
-cd ..
-cmake --build build-host --target install
+	mkdir -p install
+	if [ "$CROSS_PREFIX" != "" ]; then
+		#echo "cmake -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB=${CROSS_PREFIX}ranlib -DCMAKE_C_COMPILER=${CROSS_PREFIX}gcc -DCMAKE_CXX_COMPILER=${CROSS_PREFIX}g++ -DCMAKE_RC_COMPILER=${CROSS_PREFIX}windres -DCMAKE_INSTALL_PREFIX=\"$PREFIX\" --target install --build build-host"
+		#cmake -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_RANLIB=${CROSS_PREFIX}ranlib -DCMAKE_C_COMPILER=${CROSS_PREFIX}gcc -DCMAKE_CXX_COMPILER=${CROSS_PREFIX}g++ -DCMAKE_RC_COMPILER=${CROSS_PREFIX}windres -DCMAKE_INSTALL_PREFIX="$PREFIX" --target install --build build-host
+		echo "cmake --build build-host --target install"
+		cmake --build build-host --target install
+	else
+		echo "cmake --build build-host --target install"
+		cmake --build build-host --target install
+	fi
+	cd build-host
+		make install
+	cd ..
 
-echo 'subdirs("build-host")' > CTestTestfile.cmake
+	echo 'subdirs("build-host")' > CTestTestfile.cmake
 
 	# make tools (such as MakeImport and the compilers) available for later commands
-export PATH=$PREFIX/bin:$PATH
+	export PATH=$PREFIX/bin:$PATH
 
 ##################### Set up Interfaces & Libraries
 
-(cd "${SRC}/multiversal" && ruby make-multiverse.rb -G CIncludes -o "${PREFIX}/multiversal")
-mkdir -p "${PREFIX}/multiversal/libppc"
-cp "${SRC}/ImportLibraries"/*.a "${PREFIX}/multiversal/libppc/"
-setUpInterfacesAndLibraries
-linkInterfacesAndLibraries ${INTERFACES_KIND}
+	(cd "${SRC}/multiversal" && ruby make-multiverse.rb -G CIncludes -o "${PREFIX}/multiversal")
+	mkdir -p "${PREFIX}/multiversal/libppc"
+	cp "${SRC}/ImportLibraries"/*.a "${PREFIX}/multiversal/libppc/"
+	setUpInterfacesAndLibraries
+	linkInterfacesAndLibraries ${INTERFACES_KIND}
+
+	if [ $STOP_AFTER_TOOLS != false ]; then
+		exit 0
+	fi
+else
+	export WINEPATH="$(winepath -w "$PREFIX/bin");$WINEPATHPOST"
+	echo "WINEPATH=$WINEPATH"
+	export PATH=$PREFIX/bin:$PATH
+	echo "PATH=$PATH"
+fi
 
 ##################### Build target libraries and samples
 
@@ -347,12 +601,42 @@
 	mkdir -p build-target
 	cd build-target
 
-	cmake ${SRC} -DCMAKE_TOOLCHAIN_FILE=../build-host/cmake/intree.toolchain.cmake \
-				 -DCMAKE_BUILD_TYPE=Release \
-				 -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
-				 ${CMAKE_GENERATOR}
+	if [ "$BOOST_ROOT" != "" ]; then
+		echo 'Boost_DIR="'"$Boost_DIR"'" BOOST_DIR="'"$Boost_DIR"'" BOOST_ROOT="'"$BOOST_ROOT"'" \
+		cmake '"${SRC}"' -DCMAKE_TOOLCHAIN_FILE=../build-host/cmake/intree.toolchain.cmake \
+					 -DCMAKE_INSTALL_PREFIX='"$PREFIX"' \
+					 -DCMAKE_BUILD_TYPE=Release \
+					 -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
+					 -DBOOST_ROOT:PATH="'"$BOOST_ROOT"'" \
+					 -DBOOST_DIR:PATH="'"$Boost_DIR"'" \
+					 -DBoost_DIR:PATH="'"$Boost_DIR"'" \
+					 '"${CMAKE_GENERATOR}"
+		Boost_DIR="$Boost_DIR" BOOST_DIR="$Boost_DIR" BOOST_ROOT="$BOOST_ROOT" \
+		cmake ${SRC} -DCMAKE_TOOLCHAIN_FILE=../build-host/cmake/intree.toolchain.cmake \
+					 -DCMAKE_INSTALL_PREFIX=$PREFIX \
+					 -DCMAKE_BUILD_TYPE=Release \
+					 -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
+					 -DBOOST_ROOT:PATH="$BOOST_ROOT" \
+					 -DBOOST_DIR:PATH="$Boost_DIR" \
+					 -DBoost_DIR:PATH="$Boost_DIR" \
+					 ${CMAKE_GENERATOR}
+	else
+		echo 'cmake '"${SRC}"' -DCMAKE_TOOLCHAIN_FILE=../build-host/cmake/intree.toolchain.cmake \
+					 -DCMAKE_INSTALL_PREFIX='"$PREFIX"' \
+					 -DCMAKE_BUILD_TYPE=Release \
+					 -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
+					 '"${CMAKE_GENERATOR}"
+		cmake ${SRC} -DCMAKE_TOOLCHAIN_FILE=../build-host/cmake/intree.toolchain.cmake \
+					 -DCMAKE_INSTALL_PREFIX=$PREFIX \
+					 -DCMAKE_BUILD_TYPE=Release \
+					 -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
+					 ${CMAKE_GENERATOR}
+	fi
 	cd ..
 	cmake --build build-target --target install
+	cd build-target
+		make install
+	cd ..
 
 	echo 'subdirs("build-target")' >> CTestTestfile.cmake
 fi
@@ -368,6 +652,9 @@
 				 ${CMAKE_GENERATOR}
 	cd ..
 	cmake --build build-target-ppc --target install
+	cd build-target-ppc
+		make install
+	cd ..
 
 	echo 'subdirs("build-target-ppc")' >> CTestTestfile.cmake
 fi
@@ -383,6 +670,9 @@
 				 ${CMAKE_GENERATOR}
 	cd ..
 	cmake --build build-target-carbon --target install
+	cd build-target-carbon
+		make install
+	cd ..
 
 	echo 'subdirs("build-target-carbon")' >> CTestTestfile.cmake
 fi
